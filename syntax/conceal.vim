" we need the conceal feature (vim ‚â• 7.3)
if !has('conceal')
    finish
endif

" SEE: https://github.com/ehamberg/vim-cute-python/blob/master/after/syntax/python.vim
" SEE: https://alok.github.io/2018/04/26/using-vim-s-conceal-to-make-languages-more-tolerable/
" SEE: https://en.wikipedia.org/wiki/List_of_logic_symbols
syntax match   concealOperator "\<in\>"       conceal cchar=‚àà
syntax match   concealOperator "\<from\>"     conceal cchar=‚äÇ
syntax match   concealOperator "\<or\>"       conceal cchar=‚à®
syntax match   concealOperator "\<and\>"      conceal cchar=‚àß

" include the space after ‚Äúnot‚Äù ‚Äì if present ‚Äì so that ‚Äúnot a‚Äù becomes ‚Äú¬¨a‚Äù.
" also, don't hide ‚Äúnot‚Äù behind  ‚Äò¬¨‚Äô if it is after ‚Äúis ‚Äù.
syntax match   concealOperator "\%(is \)\@<!\<not\%( \|\>\)" conceal cchar=¬¨
syntax match   concealOperator "\<not in\>"   conceal cchar=‚àâ
syntax match   concealOperator "<="           conceal cchar=‚â§
syntax match   concealOperator ">="           conceal cchar=‚â•
syntax keyword   concealControl for           conceal cchar=‚àÄ
syntax keyword   concealControl while         conceal cchar=‚•Å
syntax keyword   concealControl match         conceal cchar=‚á∂
syntax keyword   concealControl if            conceal cchar=‚ïì
syntax keyword   concealControl elif          conceal cchar=‚ïü
syntax keyword   concealControl else          conceal cchar=‚ïô
syntax keyword   concealControl return        conceal cchar=‚ù∞
syntax keyword   concealControl break         conceal cchar=‚úñ
syntax keyword   concealControl continue      conceal cchar=‚ù±
syntax keyword   concealValue   self          conceal cchar=‚îÑ
" TODO: Should match patterns
" syntax match concealValue   "<on"            conceal cchar=‚Ü≥
" syntax match concealValue   "<do"            conceal cchar=‚á®
" syntax match concealValue   "<reduce"        conceal cchar=‚™´

syntax match   concealOperator "="           conceal cchar=‚Üê
syntax match   concealOperator "=="          conceal cchar==
syntax match   concealOperator "::>"         conceal cchar=‚™´
syntax match   concealOperator "::?"         conceal cchar=‚©º
syntax match   concealOperator "::="         conceal cchar=‚©¥
syntax match   concealOperator "->"          conceal cchar=¬´
syntax keyword  concealOperator is           conceal cchar=‚â°
syntax match     concealOperator "is not "      conceal cchar=‚â¢
syntax keyword   concealOperator !=           conceal cchar=‚â†
syntax keyword   concealKeyword  Infinity     conceal cchar=‚àû
syntax keyword   concealKeyword  None         conceal cchar=‚àÖ
syntax keyword   concealKeyword  True         conceal cchar=T
syntax keyword   concealKeyword  False        conceal cchar=F
syntax keyword   concealKeyword  assert       conceal cchar=‚úÖ
syntax keyword   concealKeyword  error        conceal cchar=‚ùó
syntax keyword   concealKeyword  pass        conceal cchar=‚ñë
syntax match   concealKeyword  "@import"     conceal cchar=‚óÇ

syntax match   concealStructure "@module"     conceal cchar=‚óÜ
syntax match   concealStructure "@class"      conceal cchar=‚ñ°
syntax match   concealStructure "@trait"      conceal cchar=‚¨ö
syntax match   concealStructure "@singleton"  conceal cchar=‚ñ†
syntax match   concealStructure "@function"   conceal cchar=ùù∫
syntax match   concealStructure "@constructor" conceal cchar=‚òÖ
syntax match   concealStructure "@method"     conceal cchar=‚ñ∏
syntax match   concealStructure "@operation"  conceal cchar=‚ñ∂
syntax match   concealStructure "@property"   conceal cchar=üûÑ
syntax match   concealStructure "@shared"     conceal cchar=‚óè
syntax match   concealStructure "@getter"     conceal cchar=‚óÉ
syntax match   concealStructure "@setter"     conceal cchar=‚ñπ

syntax keyword concealOperator sum        conceal cchar=‚àë
syntax keyword concealStatement let        conceal cchar=‚óè
syntax keyword concealStatement var        conceal cchar=‚óå
syntax match   concealOperator "\<sqrt\>" conceal cchar=‚àö
syntax match   concealKeyword "\<\PI\>"   conceal cchar=œÄ

syntax keyword concealStatement lambda conceal cchar=Œª

hi  link concealOperator  Operator
hi  link concealStatement Statement
hi  link concealKeyword   Keyword
hi  link concealStructure Structure
hi  link concealControl   Control
hi  link concealValue     Value
hi! link Conceal          Conceal

let b:conceal = "conceal"

setlocal conceallevel=1

" EOF
